package com.sebastianfox.food.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sebastianfox.food.models.Event;
import com.sebastianfox.food.models.Friendship;
import com.sebastianfox.food.models.Location;
import com.sebastianfox.food.models.User;
import com.sebastianfox.food.repository.Event.EventRepository;
import com.sebastianfox.food.repository.Friendship.FriendshipRepository;
import com.sebastianfox.food.repository.Location.LocationRepository;
import com.sebastianfox.food.repository.User.UserRepository;
import com.sebastianfox.food.services.EventService;
//import com.sebastianfox.food.services.UserService;
import com.sebastianfox.food.utils.Authenticator;
import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

//import java.io.IOException;
import java.util.HashMap;
//import java.util.UUID;

@SuppressWarnings("Duplicates")
@Controller
@RequestMapping(path = "/api")
public class TestController {
    private final UserRepository userRepository;
    private final EventRepository eventRepository;
    private final LocationRepository locationRepository;
    private final FriendshipRepository friendshipRepository;
    private Authenticator authenticator = new Authenticator();
    private ObjectMapper mapper = new ObjectMapper();
//    private UserService userService = new UserService();
    private EventService eventService = new EventService();

    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    public TestController(UserRepository userRepository,
                          EventRepository eventRepository,
                          LocationRepository locationRepository
                          ,FriendshipRepository friendshipRepository
    ) {
        this.userRepository = userRepository;
        this.eventRepository = eventRepository;
        this.locationRepository = locationRepository;
        this.friendshipRepository = friendshipRepository;
    }

    /* #############################
     *  Load Testdata
     ############################# */

    /**
     *
     * @throws JSONException exception
     */
    @RequestMapping(path = "/createTestData", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> createTestData(@RequestBody HashMap<String, Integer> data) throws JSONException, JsonProcessingException {

        Long numberOfExistingTestEntities = userRepository.countUsers();
        int numberOfNewTestEntities = data.get("number");

        for ( Long i = numberOfExistingTestEntities; i < numberOfNewTestEntities+numberOfExistingTestEntities; i++ ) {
            User user = new User();
            user.setUserName("Testuser".concat(Long.toString(i)));
            user.setSalt(authenticator.getNextSalt());
            user.setPassword(authenticator.hash("password".toCharArray(), user.getSalt()));
            user.setEmail("testmail".concat(Long.toString(i)).concat("@mail.de"));
            userRepository.save(user);
        }

        Iterable<User> users = userRepository.findAll();
        System.out.println("\n#####################################");
        System.out.println("List of available Users (Testdata)");
        System.out.println("#####################################");
        for (User user : users) {
            System.out.println(user.getId().toString());
        }

        User user1 = userRepository.findByUserName("Testuser1");
        User user2 = userRepository.findByUserName("Testuser2");
        User user3 = userRepository.findByUserName("Testuser3");
        if (user1 != null && user2 != null && user3 != null) {
            Location location = new Location();
            location.setLangitude((float) 3.1);
            location.setLongitude((float) 3.1);
            locationRepository.save(location);
            // deleted Event
            Event deletedEvent = new Event();
            deletedEvent.setLocation(location);
            deletedEvent.setOwner(user2);
            eventService.deleteEvent(deletedEvent);
            eventRepository.save(deletedEvent);
            // event
            Event event = new Event();
            event.setLocation(location);
            event.setOwner(user1);
            eventService.attendToEvent(event, user2);
            eventService.attendToEvent(event, user3);
            eventRepository.save(event);
        }

        Iterable<Event> events = eventRepository.findAllByDeletedIsFalse();
        Iterable<Event> allEvents = eventRepository.findAll();
        System.out.println("\n#####################################");
        System.out.println("List of all Events (Testdata)");
        System.out.println("#####################################");
        for (Event event : allEvents) {
            System.out.println(event.getId().toString());
        }

        System.out.println("\n#####################################");
        System.out.println("List of available Events (Testdata)");
        System.out.println("#####################################");
        for (Event event : events) {
            System.out.println(event.getId().toString());
        }


        assert user1 != null;
        user1.createAndAcceptFriendship(user2);
        user1.createAndAcceptFriendship(user3);
        assert user2 != null;
        user2.createAndAcceptFriendship(user1);
        assert user3 != null;
        user3.declineAndDeleteFriendship(user1);
        userRepository.save(user1);
        userRepository.save(user2);
        userRepository.save(user3);

        Iterable<Friendship> friendships = friendshipRepository.findAll();
        System.out.println("\n#####################################");
        System.out.println("List of Friendships");
        System.out.println("#####################################");
        for (Friendship friendship : friendships) {
            System.out.println(friendship.getId().toString()
                    .concat(": ")
                    .concat(friendship.getFriend1().getId().toString())
                    .concat(" - ")
                    .concat(friendship.getFriend2().getId().toString())
            );
        }

        // Return to app (successful)
        return new ResponseEntity<>(createResposneJson("users", users), HttpStatus.OK);
    }

    /**
     *
     * @param key for Response HashMap
     * @param value for Repsonse HashMao
     * @return String with ResponseJSON
     * @throws JSONException exceptionhandling
     * @throws JsonProcessingException exceptionhandling
     */
    @SuppressWarnings("SameParameterValue")
    private String createResposneJson(String key, Object value) throws JSONException, JsonProcessingException {
        HashMap<String,Object> responseHash = new HashMap<>();
        responseHash.put(key, value);
        return mapper.writeValueAsString(responseHash);
    }
}
