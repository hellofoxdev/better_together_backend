package com.sebastianfox.food.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.sebastianfox.food.entity.Message;
import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import com.sebastianfox.food.repository.MessageRepository;

import java.io.IOException;
import java.util.HashMap;

@SuppressWarnings("Duplicates")
@Controller    // This means that this class is a Controller
@RequestMapping(path = "/api/message") // This means URL's start with /api (after Application path)
public class MessageController {

    private final MessageRepository messageRepository;


    // This means to get the bean called messageRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    public MessageController(MessageRepository messageRepository) {
        this.messageRepository = messageRepository;
    }

    /**
     *
     * @param localeData JSON data from App
     * @return http response
     * @throws JSONException exception
     * @throws IOException exception
     */
    @RequestMapping(path = "/loadMessages", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> authenticate(@RequestBody HashMap<String, String> localeData) throws JSONException, IOException {

        Iterable<Message> messages = messageRepository.findAll();
//        for (Message message : messages) {
//            System.out.println(s);
//        }

        ObjectMapper mapper = new ObjectMapper();
        HashMap<String,HashMap> data = new HashMap<>();
        HashMap<String,Object> hashMap = new HashMap<>();

        // Successful login
        hashMap.put("status","success");
        hashMap.put("messages",messages);
        data.put("data", hashMap);
        // Object to JSON String
        String jsonString = mapper.writeValueAsString(data);
        // Return to App
        return new ResponseEntity<>(jsonString, HttpStatus.ACCEPTED);
    }
}
