package com.sebastianfox.food.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.sebastianfox.food.models.Event;
import com.sebastianfox.food.enums.EventTypes;
import com.sebastianfox.food.models.Invitation;
import com.sebastianfox.food.repository.EventRepository;
import com.sebastianfox.food.repository.InvitationRepository;
import com.sebastianfox.food.utils.Authenticator;
import com.sebastianfox.food.models.User;
import com.sebastianfox.food.repository.UserRepository;
import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

@SuppressWarnings("Duplicates")
@Controller    // This means that this class is a Controller
@RequestMapping(path = "/api/user") // This means URL's start with /api (after Application path)
public class UserController {
	private final UserRepository userRepository;
	private final EventRepository eventRepository;
	private final InvitationRepository invitationRepository;
	private Authenticator authenticator = new Authenticator();

    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    public UserController(UserRepository userRepository, EventRepository eventRepository, InvitationRepository invitationRepository) {
        this.userRepository = userRepository;
        this.eventRepository = eventRepository;
        this.invitationRepository = invitationRepository;
    }

	/**
	 * register
	 * login
	 * fb login
	 * fb register
	 * get all user
	 * get by
	 *
	 * existing user request
	 */

	@GetMapping(path = "/test")
    public void testFunction() throws ParseException {

		User user = new User();
		user.setEmail("sebastian.fox@me.com");
		user.setUsername("basti1284");
		user.setSalt(authenticator.getNextSalt());
		user.setPassword(authenticator.hash("password".toCharArray(), user.getSalt()));
		userRepository.save(user);
		userRepository.save(user);



		User user2 = new User();
		user2.setEmail("sebastian.fox@rossox.com");
		user2.setUsername("sebastian.fox.12");
		user2.setSalt(authenticator.getNextSalt());
		user2.setPassword(authenticator.hash("password".toCharArray(), user2.getSalt()));
		userRepository.save(user2);
		user2.addFriend(user);
		user.addFriendOf(user2);
		List<User> friendsOf = user.getFriendOf();
		for (User friend : friendsOf) {
			System.out.println(friend.getEmail());
		}

		//user2.createInvitation(user);
	//	user2.createInvitation(user);
		userRepository.save(user2);

		Invitation invitation = new Invitation();
		invitation.setInvited(user2);
		invitation.setInvitedBy(user);
		invitation.setEmail(user2.getEmail());
		invitationRepository.save(invitation);

		//event
		Event event = new Event();
		event.setText("Test Event");
		event.setEventType(EventTypes.COOKING);
		event.setOwner(user);
		//event.setDate(date2);

		String string = "12.12.1984";
		DateFormat format = new SimpleDateFormat("dd.MM.yyyy");
		Date date = format.parse(string);
		event.setDate(date);
		eventRepository.save(event);
	}


	/**
	 *
	 * @param userData JSON data from App
	 * @return http response
	 * @throws JSONException exception
	 * @throws IOException exception
	 */
	@SuppressWarnings("Duplicates")
	@RequestMapping(path = "/testUser", method = RequestMethod.POST, consumes = {"application/json"})
	public ResponseEntity<Object> testUser(@RequestBody HashMap<String, User> userData) throws JSONException, IOException {
		ObjectMapper mapper = new ObjectMapper();
		HashMap<String,Object> hashMap = new HashMap<>();
		User appUser = userData.get("user");
		User user = userRepository.findById(appUser.getId());
		user.mergeDataFromApp(appUser);
		userRepository.save(user);


		// Successful register
		hashMap.put("user",user);
		// Object to JSON String
		String jsonString = mapper.writeValueAsString(hashMap);
		// Return to App
		return new ResponseEntity<>(jsonString, HttpStatus.OK);
	}

	/**
	 *
	 * @param loginData JSON data from App
	 * @return http response
	 * @throws JSONException exception
	 * @throws IOException exception
	 */
    @RequestMapping(path = "/authenticate", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> authenticate(@RequestBody HashMap<String, String> loginData) throws JSONException, IOException {
		User user = userRepository.findByEmail(loginData.get("email"));
		ObjectMapper mapper = new ObjectMapper();
		HashMap<String,Object> hashMap = new HashMap<>();

		// Failure at login (user not found or bad credentials)
		if (user == null || !authenticator.isExpectedPassword(loginData.get("password").toCharArray(), user.getSalt(), user.getPassword())) {
			// Object to JSON String
			String jsonString = mapper.writeValueAsString(hashMap);
			//User testUSer = mapper.readValue(jsonString, User.class);
			// Return to App
			return new ResponseEntity<>(jsonString, HttpStatus.UNAUTHORIZED);
		}

		// Successful login
		hashMap.put("session",user.getId().toString());
		hashMap.put("user",user);
		// Object to JSON String
		String jsonString = mapper.writeValueAsString(hashMap);
		// Return to App
		return new ResponseEntity<>(jsonString, HttpStatus.OK);
	}

	/**
	 *
	 * @param userId JSON data from App
	 * @return http response
	 * @throws JSONException exception
	 * @throws IOException exception
	 */
	@SuppressWarnings("Duplicates")
	@RequestMapping(path = "/reloadUser", method = RequestMethod.POST, consumes = {"application/json"})
	public ResponseEntity<Object> reloadUser(@RequestBody HashMap<String, Integer> userId) throws JSONException, IOException {

		ObjectMapper mapper = new ObjectMapper();
		HashMap<String,Object> hashMap = new HashMap<>();
		User user = userRepository.findById(userId.get("id"));

		// check if user is available in database

		// Fail
		if (user == null){
			// Object to JSON String
			String jsonString = mapper.writeValueAsString(hashMap);
			// Return to App
			return new ResponseEntity<>(jsonString, HttpStatus.NOT_FOUND);
		}

		// Success
		hashMap.put("user",user);
		// Object to JSON String
		String jsonString = mapper.writeValueAsString(hashMap);
		// Return to App
		return new ResponseEntity<>(jsonString, HttpStatus.OK);
	}

	/**
	 *
	 * @param userData JSON data from App
	 * @return http response
	 * @throws JSONException exception
	 * @throws IOException exception
	 */
	@SuppressWarnings("Duplicates")
	@RequestMapping(path = "/updateUser", method = RequestMethod.POST, consumes = {"application/json"})
	public ResponseEntity<Object> updateUser(@RequestBody HashMap<String, User> userData) throws JSONException, IOException {
		ObjectMapper mapper = new ObjectMapper();
		HashMap<String,Object> hashMap = new HashMap<>();
		User appUser = userData.get("user");
		User user = userRepository.findById(appUser.getId());
		user.mergeDataFromApp(appUser);
		userRepository.save(user);

		// Successful register
		hashMap.put("user",user);
		// Object to JSON String
		String jsonString = mapper.writeValueAsString(hashMap);
		// Return to App
		return new ResponseEntity<>(jsonString, HttpStatus.OK);
	}

	/**
	 *
	 * @param registerData JSON data from App
	 * @return http response
	 * @throws JSONException exception
	 */
	@SuppressWarnings("Duplicates")
	@RequestMapping(path = "/checkUsername", method = RequestMethod.POST, consumes = {"application/json"})
	public ResponseEntity<Object> checkUsername(@RequestBody HashMap<String, Object> registerData) throws JSONException {

		// Username already exist
		if (userRepository.findByUsername((String) registerData.get("username")) != null){
			return new ResponseEntity<>(null, HttpStatus.CONFLICT);
		}

		// Successful register
		// Return to App
		return new ResponseEntity<>(null, HttpStatus.OK);
	}

	/**
	 *
	 * @param registerData JSON data from App
	 * @return http response
	 * @throws JSONException exception
	 */
	@SuppressWarnings("Duplicates")
	@RequestMapping(path = "/checkMail", method = RequestMethod.POST, consumes = {"application/json"})
	public ResponseEntity<Object> checkMail(@RequestBody HashMap<String, Object> registerData) throws JSONException {

		// Mail already exist
		if (userRepository.findByEmail((String) registerData.get("mail")) != null){
			return new ResponseEntity<>(null, HttpStatus.CONFLICT);
		}

		// Successful register
		// Return to App
		return new ResponseEntity<>(null, HttpStatus.OK);
	}

	/**
	 *
	 * @param registerData JSON data from App
	 * @return http response
	 * @throws JSONException exception
	 * @throws IOException exception
	 */
	@SuppressWarnings("Duplicates")
	@RequestMapping(path = "/registerUser", method = RequestMethod.POST, consumes = {"application/json"})
	public ResponseEntity<Object> registerUser(@RequestBody HashMap<String, Object> registerData) throws JSONException, IOException {

		/*
		 * Store values
		 */
		String username = (String) registerData.get("username");
		String mail = (String) registerData.get("mail");
		String password = (String) registerData.get("password");

		ObjectMapper mapper = new ObjectMapper();
		HashMap<String,Object> hashMap = new HashMap<>();

		if (userRepository.findByUsername(username) != null){
			// Object to JSON String
			return new ResponseEntity<>(null, HttpStatus.CONFLICT);
		}
		if (userRepository.findByEmail(mail) != null){
			return new ResponseEntity<>(null, HttpStatus.CONFLICT);
		}
		// Create and safe new user
		User user = new User();
		user.setUsername(username);
		user.setEmail(mail);
		user.setSalt(authenticator.getNextSalt());
		user.setPassword(authenticator.hash(password.toCharArray(), user.getSalt()));
		userRepository.save(user);

		Iterable<Invitation> invitations = invitationRepository.findByEmail(mail);
		for (Invitation invitation : invitations) {
			invitation.setInvited(user);
			invitationRepository.save(invitation);
		}

		// Successful register
		hashMap.put("user", user);
		// Object to JSON String
		String jsonString = mapper.writeValueAsString(hashMap);
		// Return to App
		return new ResponseEntity<>(jsonString, HttpStatus.OK);
	}

	/**
	 *
	 * @param loginData JSON data from App
	 * @return http response
	 * @throws JSONException exception
	 * @throws IOException exception
	 */
	@SuppressWarnings("Duplicates")
	@RequestMapping(path = "/facebookLogin", method = RequestMethod.POST, consumes = {"application/json"})
	public ResponseEntity<Object> facebookLogin(@RequestBody HashMap<String, Object> loginData) throws JSONException, IOException {
		ObjectMapper mapper = new ObjectMapper();
		HashMap<String,Object> hashMap = new HashMap<>();
		User requestedUser = (User) loginData.get("user");
		User facebookUser = userRepository.findByFacebookId(requestedUser.getFacebookId());

		// If user does not exist, create it
		if (facebookUser == null){
			userRepository.save(requestedUser);
			hashMap.put("user", requestedUser);
			// Object to JSON String
			String jsonString = mapper.writeValueAsString(hashMap);
            return new ResponseEntity<>(jsonString, HttpStatus.CREATED);
        }

        // User already exists and is foud in database
		hashMap.put("user", facebookUser);
		// Object to JSON String
		String jsonString = mapper.writeValueAsString(hashMap);
		// Return to App
		return new ResponseEntity<>(jsonString, HttpStatus.OK);
	}

	/**
	 * @param username JSON data from App
	 * @return http response
	 * @throws JSONException exception
	 * @throws IOException exception
	 */
	@RequestMapping(path = "/findByUsername", method = RequestMethod.POST, consumes = {"application/json"})
	public ResponseEntity<Object> findByUsername(@RequestBody HashMap<String, Object> username) throws JSONException, IOException {
		User user = userRepository.findByUsername((String) username.get("username"));
		ObjectMapper mapper = new ObjectMapper();
		//HashMap<String,HashMap> data = new HashMap<>();
		HashMap<String,Object> hashMap = new HashMap<>();

		// Failure at login (user not found or bad credentials)
		if (user == null) {
		//	data.put("data", hashMap);
			// Return to App
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}

		hashMap.put("user",user);
		//data.put("data", hashMap);
		// Object to JSON String
		String jsonString = mapper.writeValueAsString(hashMap);
		// Return to App
		return new ResponseEntity<>(jsonString, HttpStatus.OK);
	}

	/**
	 *
	 * @param mail JSON data from App
	 * @return http response
	 * @throws JSONException exception
	 * @throws IOException exception
	 */
	@RequestMapping(path = "/findByMail", method = RequestMethod.POST, consumes = {"application/json"})
	public ResponseEntity<Object> findByMail(@RequestBody HashMap<String, Object> mail) throws JSONException, IOException {
		User user = userRepository.findByEmail((String) mail.get("mail"));
		ObjectMapper mapper = new ObjectMapper();
		HashMap<String,Object> hashMap = new HashMap<>();

		// Failure at login (user not found or bad credentials)
		if (user == null) {
			// Return to App
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}

		hashMap.put("user",user);
		// Object to JSON String
		String jsonString = mapper.writeValueAsString(hashMap);
		// Return to App
		return new ResponseEntity<>(jsonString, HttpStatus.OK);
	}

	@GetMapping(path = "/getAllUsers")
	public @ResponseBody
	Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
}
