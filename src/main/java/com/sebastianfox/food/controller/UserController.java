package com.sebastianfox.food.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.sebastianfox.food.models.*;
import com.sebastianfox.food.enums.EventTypes;
import com.sebastianfox.food.repository.EventRepository;
import com.sebastianfox.food.repository.FriendshipRepository;
import com.sebastianfox.food.repository.InvitationRepository;
import com.sebastianfox.food.utils.Authenticator;
import com.sebastianfox.food.repository.UserRepository;
import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
//import java.text.DateFormat;
//import java.text.SimpleDateFormat;
import java.util.*;

@SuppressWarnings("Duplicates")
@Controller    // This means that this class is a Controller
@RequestMapping(path = "/api/user")
// This means URL's start with /api (after Application path)
public class UserController {
    private final UserRepository userRepository;
    private final EventRepository eventRepository;
    private final InvitationRepository invitationRepository;
    private final FriendshipRepository friendshipRepository;
    private Authenticator authenticator = new Authenticator();

    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    public UserController(UserRepository userRepository, EventRepository eventRepository, InvitationRepository invitationRepository, FriendshipRepository friendshipRepository) {
        this.userRepository = userRepository;
        this.eventRepository = eventRepository;
        this.invitationRepository = invitationRepository;
        this.friendshipRepository = friendshipRepository;
    }

    /**
     * register
     * login
     * fb login
     * fb register
     * get all user
     * get by
     * <p>
     * existing user request
     */

    @GetMapping(path = "/test")
    public void testFunction() {
        //@RequestMapping(path = "/test", method = RequestMethod.GET, consumes = {"application/json"})
        //public ResponseEntity<Object> testFunction(@RequestBody HashMap<String, User> string2) throws JSONException, IOException {

        List<User> users =  new ArrayList<>();

        String[][] usernames = {
                {"basti1284", "sebastian.fox@me.com"},
                {"sebastian.fox.12", "sebastian.fox@rossox.com"},
        };

        for (String[] userInfo : usernames) {
            User user = new User();
            System.out.println("Username: " + userInfo[0]);
            System.out.println("Email: " + userInfo[1]);

            String username = userInfo[0];
            String email = userInfo[1];
            User checkUser = userRepository.findByUserName(username);
            if (checkUser == null) {
                user.setEmail(email);
                user.setUserName(username);
                user.setSalt(authenticator.getNextSalt());
                user.setPassword(authenticator.hash("password".toCharArray(), user.getSalt()));
                userRepository.save(user);
            } else {
                user = checkUser;
            }

            users.add(user);
        }

        if (users.size() >= 2){
            // load users from array list
            User user = users.get(0);
            User user1 = users.get(1);

            // invitations
            Invitation invitation = new Invitation();
            invitation.setInvited(user1);
            invitation.setInvitedBy(user);
            invitation.setEmail(user1.getEmail());
            invitationRepository.save(invitation);

            // Location
            Location location = new Location();
            location.setCity("Ellerhoop");

            //events
            Event event = new Event();
            event.setText("Test Event");
//            event.setLocation(location);
            event.setEventType(EventTypes.COOKING);
            event.setOwner(user);
            eventRepository.save(event);
        }

        System.out.println("Ende");
    }

    /**
     * @param data JSON data from App
     * @return http response
     * @throws JSONException exception
     * @throws IOException   exception
     */
    @SuppressWarnings("Duplicates")
    @RequestMapping(path = "/testUser", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> testUser(@RequestBody HashMap<String, User> data) throws JSONException, IOException {
        ObjectMapper mapper = new ObjectMapper();
        HashMap<String, Object> hashMap = new HashMap<>();
        User appUser = data.get("user");
        User user = userRepository.findById(appUser.getId());
        user.mergeDataFromApp(appUser);
        userRepository.save(user);

        // Successful register
        hashMap.put("user", user);
        // Object to JSON String
        String jsonString = mapper.writeValueAsString(hashMap);
        // Return to App
        return new ResponseEntity<>(jsonString, HttpStatus.OK);
    }

    /**
     * @param data JSON data from App
     * @return http response
     * @throws JSONException exception
     * @throws IOException   exception
     */
    @RequestMapping(path = "/authenticate", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> authenticate(@RequestBody HashMap<String, String> data) throws JSONException, IOException {
        User user = userRepository.findByEmail(data.get("email"));
        ObjectMapper mapper = new ObjectMapper();
        HashMap<String, Object> hashMap = new HashMap<>();

        // Failure at login (user not found or bad credentials)
        if (user == null || !authenticator.isExpectedPassword(data.get("password").toCharArray(), user.getSalt(), user.getPassword())) {
            // Object to JSON String
            String jsonString = mapper.writeValueAsString(hashMap);
            //User testUSer = mapper.readValue(jsonString, User.class);
            // Return to App
            return new ResponseEntity<>(jsonString, HttpStatus.UNAUTHORIZED);
        }

        // Successful login
        hashMap.put("session", user.getId().toString());
        hashMap.put("user", user);
        // Object to JSON String
        String jsonString = mapper.writeValueAsString(hashMap);
        // Return to App
        return new ResponseEntity<>(jsonString, HttpStatus.OK);
    }

    /**
     * @param data JSON data from App
     * @return http response
     * @throws JSONException exception
     * @throws IOException   exception
     */
    @SuppressWarnings("Duplicates")
    @RequestMapping(path = "/reloadUser", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> reloadUser(@RequestBody HashMap<String, Integer> data) throws JSONException, IOException {

        ObjectMapper mapper = new ObjectMapper();
        HashMap<String, Object> hashMap = new HashMap<>();
        User user = userRepository.findById(data.get("id"));

        // Fail
        if (user == null) {
            // Object to JSON String
            String jsonString = mapper.writeValueAsString(hashMap);
            // Return to App
            return new ResponseEntity<>(jsonString, HttpStatus.NOT_FOUND);
        }

        // Success
        hashMap.put("user", user);
        // Object to JSON String
        String jsonString = mapper.writeValueAsString(hashMap);
        // Return to App
        return new ResponseEntity<>(jsonString, HttpStatus.OK);
    }

    /**
     * @param userData JSON data from App
     * @return http response
     * @throws JSONException exception
     * @throws IOException   exception
     */
    @SuppressWarnings("Duplicates")
    @RequestMapping(path = "/updateUser", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> updateUser(@RequestBody HashMap<String, User> userData) throws JSONException, IOException {
        ObjectMapper mapper = new ObjectMapper();
        HashMap<String, Object> hashMap = new HashMap<>();
        User appUser = userData.get("user");
        User user = userRepository.findById(appUser.getId());
        user.mergeDataFromApp(appUser);
        userRepository.save(user);

        // Successful register
        hashMap.put("user", user);
        // Object to JSON String
        String jsonString = mapper.writeValueAsString(hashMap);
        // Return to App
        return new ResponseEntity<>(jsonString, HttpStatus.OK);
    }

    /**
     * @param registerData JSON data from App
     * @return http response
     * @throws JSONException exception
     */
    @SuppressWarnings("Duplicates")
    @RequestMapping(path = "/checkUsername", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> checkUsername(@RequestBody HashMap<String, Object> registerData) throws JSONException {

        // Username already exist
        if (userRepository.findByUserName((String) registerData.get("username")) != null) {
            return new ResponseEntity<>(null, HttpStatus.CONFLICT);
        }

        // Successful register
        // Return to App
        return new ResponseEntity<>(null, HttpStatus.OK);
    }

    /**
     * @param registerData JSON data from App
     * @return http response
     * @throws JSONException exception
     */
    @SuppressWarnings("Duplicates")
    @RequestMapping(path = "/checkMail", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> checkMail(@RequestBody HashMap<String, Object> registerData) throws JSONException {

        // Mail already exist
        if (userRepository.findByEmail((String) registerData.get("mail")) != null) {
            return new ResponseEntity<>(null, HttpStatus.CONFLICT);
        }

        // Successful register
        // Return to App
        return new ResponseEntity<>(null, HttpStatus.OK);
    }

    /**
     * @param registerData JSON data from App
     * @return http response
     * @throws JSONException exception
     * @throws IOException   exception
     */
    @SuppressWarnings("Duplicates")
    @RequestMapping(path = "/registerUser", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> registerUser(@RequestBody HashMap<String, Object> registerData) throws JSONException, IOException {

        /*
         * Store values
         */
        String username = (String) registerData.get("userName");
        String mail = (String) registerData.get("email");
        String password = (String) registerData.get("password");

        ObjectMapper mapper = new ObjectMapper();
        HashMap<String, Object> hashMap = new HashMap<>();

        if (userRepository.findByUserName(username) != null) {
            // Object to JSON String
            return new ResponseEntity<>(null, HttpStatus.CONFLICT);
        }
        if (userRepository.findByEmail(mail) != null) {
            return new ResponseEntity<>(null, HttpStatus.CONFLICT);
        }
        // Create and safe new user
        User user = new User();
        user.setUserName(username);
        user.setEmail(mail);
        user.setSalt(authenticator.getNextSalt());
        user.setPassword(authenticator.hash(password.toCharArray(), user.getSalt()));
        userRepository.save(user);

        Iterable<Invitation> invitations = invitationRepository.findByEmail(mail);
        for (Invitation invitation : invitations) {
            invitation.setInvited(user);
            invitationRepository.save(invitation);
        }

        // Successful register
        hashMap.put("user", user);
        // Object to JSON String
        String jsonString = mapper.writeValueAsString(hashMap);
        // Return to App
        return new ResponseEntity<>(jsonString, HttpStatus.CREATED);
    }

    /**
     * @param loginData JSON data from App
     * @return http response
     * @throws JSONException exception
     * @throws IOException   exception
     */
    @SuppressWarnings("Duplicates")
    @RequestMapping(path = "/facebookLogin", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> facebookLogin(@RequestBody HashMap<String, Object> loginData) throws JSONException, IOException {
        ObjectMapper mapper = new ObjectMapper();
        HashMap<String, Object> hashMap = new HashMap<>();
        User requestedUser = (User) loginData.get("user");
        User facebookUser = userRepository.findByFacebookAccountId(requestedUser.getFacebookAccountId());

        // If user does not exist, create it
        if (facebookUser == null) {
            userRepository.save(requestedUser);

            Iterable<Invitation> invitations = invitationRepository.findByEmail(requestedUser.getEmail());
            for (Invitation invitation : invitations) {
                invitation.setInvited(requestedUser);
                invitationRepository.save(invitation);
            }


            hashMap.put("user", requestedUser);
            // Object to JSON String
            String jsonString = mapper.writeValueAsString(hashMap);
            return new ResponseEntity<>(jsonString, HttpStatus.CREATED);
        }

        // User already exists and is foud in database
        hashMap.put("user", facebookUser);
        // Object to JSON String
        String jsonString = mapper.writeValueAsString(hashMap);
        // Return to App
        return new ResponseEntity<>(jsonString, HttpStatus.OK);
    }

    /**
     * @param username JSON data from App
     * @return http response
     * @throws JSONException exception
     * @throws IOException   exception
     */
    @RequestMapping(path = "/findByUsername", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> findByUsername(@RequestBody HashMap<String, Object> username) throws JSONException, IOException {
        User user = userRepository.findByUserName((String) username.get("username"));
        ObjectMapper mapper = new ObjectMapper();
        //HashMap<String,HashMap> data = new HashMap<>();
        HashMap<String, Object> hashMap = new HashMap<>();

        // Failure at login (user not found or bad credentials)
        if (user == null) {
            // Return to App
            return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
        }

        hashMap.put("user", user);
        // Object to JSON String
        String jsonString = mapper.writeValueAsString(hashMap);
        // Return to App
        return new ResponseEntity<>(jsonString, HttpStatus.OK);
    }

    /**
     * @param mail JSON data from App
     * @return http response
     * @throws JSONException exception
     * @throws IOException   exception
     */
    @RequestMapping(path = "/findByMail", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> findByMail(@RequestBody HashMap<String, Object> mail) throws JSONException, IOException {
        User user = userRepository.findByEmail((String) mail.get("mail"));
        ObjectMapper mapper = new ObjectMapper();
        HashMap<String, Object> hashMap = new HashMap<>();

        // Failure at login (user not found or bad credentials)
        if (user == null) {
            // Return to App
            return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
        }

        hashMap.put("user", user);
        // Object to JSON String
        String jsonString = mapper.writeValueAsString(hashMap);
        // Return to App
        return new ResponseEntity<>(jsonString, HttpStatus.OK);
    }

    @GetMapping(path = "/getAllUsers")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    /**
     * @param data JSON data from App
     * @return http response
     * @throws JSONException exception
     * @throws IOException   exception
     */
    @RequestMapping(path = "/createAndAcceptFriendRequest", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> createAndAcceptFriendRequest(@RequestBody HashMap<String, Integer> data) throws JSONException, IOException {

        ObjectMapper mapper = new ObjectMapper();
        HashMap<String, Object> hashMap = new HashMap<>();
        User user = userRepository.findById(data.get("user_id"));
        User friend = userRepository.findById(data.get("friend_id"));

        Friendship friendship = user.createAndAcceptFriendship(friend);
        if (friendship != null){
            friendshipRepository.save(friendship);
        }
        hashMap.put("user", user);
        // Object to JSON String
        String jsonString = mapper.writeValueAsString(hashMap);
        return new ResponseEntity<>(jsonString, HttpStatus.OK);
    }

    /**
     * @param data JSON data from App
     * @return http response
     * @throws JSONException exception
     * @throws IOException   exception
     */
    @RequestMapping(path = "/declineAndDeleteFriendship", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> declineAndDeleteFriendship(@RequestBody HashMap<String, Integer> data) throws JSONException, IOException {

        ObjectMapper mapper = new ObjectMapper();
        HashMap<String, Object> hashMap = new HashMap<>();
        User user = userRepository.findById(data.get("user_id"));
        User friend = userRepository.findById(data.get("friend_id"));

        Friendship friendship = user.declineAndDeleteFriendship(friend);
        if (friendship != null) {
            friendshipRepository.delete(friendship);
        }
        hashMap.put("user", user);
        // Object to JSON String
        String jsonString = mapper.writeValueAsString(hashMap);
        return new ResponseEntity<>(jsonString, HttpStatus.OK);
    }
}
