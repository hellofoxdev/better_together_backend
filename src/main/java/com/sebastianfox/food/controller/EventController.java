package com.sebastianfox.food.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.sebastianfox.food.models.Event;
import com.sebastianfox.food.models.User;
import com.sebastianfox.food.repository.EventRepository;
import com.sebastianfox.food.repository.UserRepository;
import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.HashMap;

@SuppressWarnings("unused")
@Controller    // This means that this class is a Controller
@RequestMapping(path = "/api/event") // This means URL's start with /api (after Application path)
public class EventController {

    private final EventRepository eventRepository;
    private final UserRepository userRepository;

    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    public EventController(EventRepository eventRepository, UserRepository userRepository) {
        this.eventRepository = eventRepository;
        this.userRepository = userRepository;
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<Event> getAllUserEvents() {
        // This returns a JSON or XML with the users
        return eventRepository.findAll();
    }

    /**
     *
     * @param localeData JSON data from App
     * @return http response
     * @throws JSONException exception
     * @throws IOException exception
     */
    @RequestMapping(path = "/loadAllEvents", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> loadAllEvents(@RequestBody HashMap<String, String> localeData) throws JSONException, IOException {

        Iterable<Event> events = eventRepository.findAll();

        ObjectMapper mapper = new ObjectMapper();
        HashMap<String,Object> hashMap = new HashMap<>();

        // Object to JSON String
        hashMap.put("events",events);
        String jsonString = mapper.writeValueAsString(hashMap);
        // Return to App
        return new ResponseEntity<>(jsonString, HttpStatus.ACCEPTED);
    }

    /**
     *
     * @param userData JSON data from App
     * @return http response
     * @throws JSONException exception
     * @throws IOException exception
     */
    @SuppressWarnings("Duplicates")
    @RequestMapping(path = "/loadUserEvents", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> loadUserEvents(@RequestBody HashMap<String, Object> userData) throws JSONException, IOException {
        ObjectMapper mapper = new ObjectMapper();
        HashMap<String,Object> hashMap = new HashMap<>();
        User appUser = userRepository.findById((Integer) userData.get("id"));

        // check if user is available in database
        if (appUser == null) {
            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
        }

        // check it getEvents is not null
        if (appUser.getEvents() == null) {
            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
        }

        // attach events to response
        hashMap.put("events",appUser.getEvents());
        // Object to JSON String
        String jsonString = mapper.writeValueAsString(hashMap);
        // Return to App
        return new ResponseEntity<>(jsonString, HttpStatus.ACCEPTED);
    }

    /**
     *
     * @param eventData JSON data from App
     * @return http response
     * @throws JSONException exception
     * @throws IOException exception
     */
    @SuppressWarnings("Duplicates")
    @RequestMapping(path = "/createNewEvent", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> createNewEvent(@RequestBody HashMap<String, Object> eventData) throws JSONException, IOException {
        ObjectMapper mapper = new ObjectMapper();
        HashMap<String,Object> hashMap = new HashMap<>();

        Event event = (Event) eventData.get("event");
        eventRepository.save(event);

        /*
        User user = userRepository.findById(eventData.get("mail"));
        Event event = new Event();
        event.setText(eventData.get("title"));
        event.setDescription(eventData.get("description"));
        event.setOwner(user);
        event.addMember(user);
        eventRepository.save(event);*/

        // Object to JSON String
        hashMap.put("event",event);
        String jsonString = mapper.writeValueAsString(hashMap);
        // Return to App
        return new ResponseEntity<>(jsonString, HttpStatus.CREATED);
    }

    /**
     *
     * @param eventData JSON data from App
     * @return http response
     * @throws JSONException exception
     */
    @SuppressWarnings("Duplicates")
    @RequestMapping(path = "/createNewEvent", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> createNewEventByEvent(@RequestBody HashMap<String, Event> eventData) throws JSONException {
        ObjectMapper mapper = new ObjectMapper();
        HashMap<String,Object> hashMap = new HashMap<>();
        Event event = eventData.get("event");
        return new ResponseEntity<>("jsonString", HttpStatus.ACCEPTED);
    }

    /**
     *
     * @param eventData JSON data from App
     * @return http response
     * @throws JSONException exception
     * @throws IOException exception
     */
    @SuppressWarnings("Duplicates")
    @RequestMapping(path = "/reloadEventById", method = RequestMethod.POST, consumes = {"application/json"})
    public ResponseEntity<Object> reloadEventById(@RequestBody HashMap<String, Object> eventData) throws JSONException, IOException {
        // Preperation
        ObjectMapper mapper = new ObjectMapper();
        HashMap<String,Object> hashMap = new HashMap<>();

        // Get Data
        Integer id = (Integer) eventData.get("id");
        Event event = eventRepository.findById(id);

        // Check if event is available in database
        if (event == null){
            return new ResponseEntity<>(null, HttpStatus.CONFLICT);
        }

        // Object to JSON String
        hashMap.put("event",event);
        String jsonString = mapper.writeValueAsString(hashMap);
        // Return to App
        return new ResponseEntity<>(jsonString, HttpStatus.ACCEPTED);
    }
}
